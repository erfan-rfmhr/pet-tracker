/*
 * This file/code is part of Paper UI project.
 *
 * Paper UI - is a modern front-end framework based on Material Design by Google
 * https://github.com/virtyaluk/paper-ui
 *
 * Copyright (c) 2015 Bohdan Shtepan
 * http://modern-dev.com/
 *
 * Licensed under the MIT license.
 */
 {"version":3,"sources":["paperRipple.jquery.js"],"names":["window","$","module","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","ElementRect","element","this","_element","width","boundingRect","height","size","Math","max","value","_ref","_ref$x","x","undefined","_ref$y","y","euclideanDistance","_ref2","clientX","clientY","l","left","t","top","w","h","_x","_y","get","getBoundingClientRect","point1","point2","sqrt","pow","_window","_doc","document","_now","performance","now","bind","Date","PaperWave","_ref3","_ref3$recenters","recenters","_ref3$center","center","_ref3$initialOpacity","initialOpacity","_ref3$opacityDecayVel","opacityDecayVelocity","color","getComputedStyle","containerRect","$wave","createElement","classList","add","style","backgroundColor","appendChild","resetDefaults","maxRadius","touchDownStarted","touchUpStarted","startPosition","endPosition","cssString","scaleFactor","radius","containerCenter","currentPos","currentPosition","deltaPos","opacity","webkitTransform","mozTransform","msTransform","oTransform","transform","event","arguments","distanceToFarthestCorner","isTouchDown","parentNode","removeChild","elapsed","touchUpElapsed","touchDownElapsed","touchDownElapsedSeconds","touchUpElapsedSeconds","min","MAX_RADIUS","currentTime","mouseInteractionSeconds","actualRadius","abs","isWaveFullyOpaque","isMaxRadiusReached","translateFraction","translationFraction","PaperRipple","cfg","_ref4","_ref4$initialOpacity","_ref4$opacityDecayVel","_ref4$recenters","_ref4$center","_ref4$round","round","_ref4$target","_waves","_initTarget","nodeType","$background","querySelector","$waves","wave","push","ev","addWave","downAction","animate","forEach","upAction","waveIndex","indexOf","splice","remove","draw","outerOpacity","removeWave","shouldKeepAnimating","requestAnimationFrame","hasAttribute","set","newValue","contains","toggle","some","isAnimationComplete","exports","_touchEvents","navigator","msPointerEnabled","PointerEvent","down","up","fn","paperRipple","options","each","ripple","e","prepand","on","jQuery"],"mappings":"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","file":"paperRipple.jquery.js","sourcesContent":["/*\n * This file/code is part of Paper UI project.\n *\n * Paper UI - is a modern front-end framework based on Material Design by Google\n * https://github.com/virtyaluk/paper-ui\n *\n * Copyright (c) 2015 Bohdan Shtepan\n * http://modern-dev.com/\n *\n * Licensed under the MIT license.\n */\n ;(function(window, $, module) {\n'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * This file\\code is part of Paper UI project.\r\n *\r\n * Paper UI - is a modern front-end framework based on Material Design by Google\r\n * https://github.com/virtyaluk/paper-ui\r\n *\r\n * Copyright (c) 2015 Bohdan Shtepan\r\n * http://modern-dev.com/\r\n *\r\n * Licensed under the MIT license.\r\n */\n\n/*eslint no-unused-vars: 0*/\n\n/**\r\n * Provides the utilities for getting element's metrics.\r\n *\r\n * @class ElementRect\r\n */\n\nvar ElementRect = (function () {\n    /**\r\n     * Initializes a new instance of the `ElementRect` class with the specified `element`.\r\n     *\r\n     * @constructs ElementRect\r\n     * @param {HTMLElement} element - The DOM element to get metrics from\r\n     * @returns {ElementRect} The new instance of a class.\r\n     */\n\n    function ElementRect(element) {\n        _classCallCheck(this, ElementRect);\n\n        this._element = element;\n\n        /**\r\n         * Returns the width of the current element.\r\n         *\r\n         * @type {Number}\r\n         */\n        this.width = this.boundingRect.width;\n\n        /**\r\n         * Returns the height of the current element.\r\n         *\r\n         * @type {Number}\r\n         */\n        this.height = this.boundingRect.height;\n\n        /**\r\n         * Returns the size (the biggest side) of the current element.\r\n         *\r\n         * @type {number}\r\n         */\n        this.size = Math.max(this.width, this.height);\n\n        return this;\n    }\n\n    /**\r\n     * Returns the center coordinates of the current element.\r\n     *\r\n     * @returns {{ x: Number, y: Number }} Object containing coordinates of the element's center.\r\n     */\n\n    _createClass(ElementRect, [{\n        key: 'distanceToFarthestCorner',\n\n        /**\r\n         * Calculates the distance between given point and farthest corner of the current element.\r\n         *\r\n         * @param {{ x: Number, y:Number }} [point={x:0,y:0}] - The point object containing x and y coordinates.\r\n         * @returns {Number} Distance from a point to the container's farthest corner.\r\n         */\n        value: function distanceToFarthestCorner(_ref) {\n            var _ref$x = _ref.x;\n            var x = _ref$x === undefined ? 0 : _ref$x;\n            var _ref$y = _ref.y;\n            var y = _ref$y === undefined ? 0 : _ref$y;\n\n            return Math.max(ElementRect.euclideanDistance({ x: x, y: y }, { x: 0, y: 0 }), ElementRect.euclideanDistance({ x: x, y: y }, { x: this.width, y: 0 }), ElementRect.euclideanDistance({ x: x, y: y }, { x: 0, y: this.height }), ElementRect.euclideanDistance({ x: x, y: y }, { x: this.width, y: this.height }));\n        }\n\n        /**\r\n         *  Determines if the specified point is contained within this element.\r\n         *\r\n         * @param {(Event|Object)} ev - The object containing coordinates of the point.\r\n         * @param {Number} ev.x - The `x` coordinate of the point.\r\n         * @param {Number} ev.y - The `y` coordinate of the point.\r\n         * @param {Number} ev.clientX - The `x` coordinate of the point.\r\n         * @param {Number} ev.clientY - The `y` coordinate of the point.\r\n         * @returns {Boolean} Returns `true` if the `x` and `y` coordinates of point is a point inside this element's rectangle, otherwise `false`.\r\n         */\n\n    }, {\n        key: 'contains',\n        value: function contains(_ref2) {\n            var x = _ref2.x;\n            var y = _ref2.y;\n            var clientX = _ref2.clientX;\n            var clientY = _ref2.clientY;\n\n            var l = this.boundingRect.left,\n                t = this.boundingRect.top,\n                w = this.boundingRect.width,\n                h = this.boundingRect.height,\n                _x = x || clientX || 0,\n                _y = y || clientY || 0;\n\n            return _x >= l && _x <= l + w && _y >= t && _y <= t + h;\n        }\n    }, {\n        key: 'center',\n        get: function get() {\n            return {\n                x: this.width / 2,\n                y: this.height / 2\n            };\n        }\n\n        /**\r\n         * Returns the size of the current element and its position relative to the viewport.\r\n         *\r\n         * @returns {ClientRect} The returned value is a `ClientRect` object, which contains read-only `left`, `top`, `right` and `bottom` properties\r\n         * describing the border-box in pixels. `top` and `left` are relative to the top-left of the viewport.\r\n         */\n\n    }, {\n        key: 'boundingRect',\n        get: function get() {\n            return this._element.getBoundingClientRect();\n        }\n\n        /**\r\n         * Calculates euclidean distance between two points.\r\n         *\r\n         * @static\r\n         * @param {{ x: Number, y: Number }} point1 - Start point\r\n         * @param {{ x: Number, y: Number }} point2 - End point\r\n         * @returns {Number} Distance between two points.\r\n         */\n\n    }], [{\n        key: 'euclideanDistance',\n        value: function euclideanDistance(point1, point2) {\n            return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2));\n        }\n    }]);\n\n    return ElementRect;\n})();\n/**\r\n * This file\\code is part of Paper UI project.\r\n *\r\n * Paper UI - is a modern front-end framework based on Material Design by Google\r\n * https://github.com/virtyaluk/paper-ui\r\n *\r\n * Copyright (c) 2015 Bohdan Shtepan\r\n * http://modern-dev.com/\r\n *\r\n * Licensed under the MIT license.\r\n */\n\n/*eslint no-unused-vars: 0*/\n\nvar _window = window || undefined,\n    _doc = _window.document,\n    _now = (function () {\n    return _window.performance && _window.performance.now ? _window.performance.now.bind(_window.performance) : Date.now;\n})();\n\n/**\r\n * Provides all the logic to produce a one-time rippling effect.\r\n *\r\n * @class PaperWave\r\n */\n\nvar PaperWave = (function () {\n    /**\r\n     * Initializes a new instance of the `PaperWave` class with the specified `PaperRipple` instance.\r\n     *\r\n     * @constructs PaperWave\r\n     * @returns {PaperWave} The new instance of a class.\r\n     *\r\n     * @example\r\n     * var paperWave = new PaperWave(paperRipple);\r\n     *\r\n     * paperWave.downAction(null);\r\n     * paperWave.upAction();\r\n     *\r\n     * if (paperWave.isAnimationCompleted) {\r\n     *     paperWave.remove();\r\n     * }\r\n     */\n\n    function PaperWave(_ref3) {\n        var $ = _ref3.$;\n        var _ref3$recenters = _ref3.recenters;\n        var recenters = _ref3$recenters === undefined ? false : _ref3$recenters;\n        var _ref3$center = _ref3.center;\n        var center = _ref3$center === undefined ? false : _ref3$center;\n        var _ref3$initialOpacity = _ref3.initialOpacity;\n        var initialOpacity = _ref3$initialOpacity === undefined ? 0.25 : _ref3$initialOpacity;\n        var _ref3$opacityDecayVel = _ref3.opacityDecayVelocity;\n        var opacityDecayVelocity = _ref3$opacityDecayVel === undefined ? 0.8 : _ref3$opacityDecayVel;\n\n        _classCallCheck(this, PaperWave);\n\n        /**\r\n         * Gets or sets the color of the wave.\r\n         *\r\n         * @type {String}\r\n         */\n        this.color = _window.getComputedStyle($).color;\n\n        /**\r\n         * Gets or sets the container metrics of the wave.\r\n         *\r\n         * @type {ElementRect}\r\n         */\n        this.containerRect = new ElementRect($);\n\n        /**\r\n         * Determines whether the wave should be re-centered towards the center of its container.\r\n         *\r\n         * @type {Boolean}\r\n         */\n        this.recenters = recenters;\n\n        /**\r\n         * Determines whether the wave should start a movement from the center of its container.\r\n         *\r\n         * @type {Boolean}\r\n         */\n        this.center = center;\n\n        /**\r\n         * Gets initial opacity of the wave.\r\n         *\r\n         * @type {Number}\r\n         */\n        this.initialOpacity = initialOpacity;\n\n        /**\r\n         * Gets opacity decay velocity of the wave.\r\n         *\r\n         * @type {Number}\r\n         */\n        this.opacityDecayVelocity = opacityDecayVelocity;\n\n        /**\r\n         * Represents the object wrapped around the `wave` DOM element that belongs to the current instance.\r\n         *\r\n         * @type {Object}\r\n         */\n        this.$wave = _doc.createElement('div');\n\n        this.$wave.classList.add('paper-ripple__wave');\n        this.$wave.style.backgroundColor = this.color;\n\n        /**\r\n         * Represents the object wrapped around the main DOM element that belongs to the current instance.\r\n         *\r\n         * @type {Object}\r\n         */\n        this.$ = _doc.createElement('div');\n\n        this.$.classList.add('paper-ripple__wave-container');\n        this.$.appendChild(this.$wave);\n\n        this.resetDefaults();\n\n        return this;\n    }\n\n    /**\r\n     * Represents the max possible value of the wave's radius.\r\n     *\r\n     * @const {Number}\r\n     * @default\r\n     */\n\n    _createClass(PaperWave, [{\n        key: 'resetDefaults',\n\n        /**\r\n         * Resets all the wave's values.\r\n         *\r\n         * @returns {PaperWave} Current instance for method chaining.\r\n         */\n        value: function resetDefaults() {\n            /**\r\n             * Gets or sets max radius of the wave.\r\n             *\r\n             * @type {Number}\r\n             */\n            this.maxRadius = 0;\n\n            /**\r\n             * Gets or sets the time of starting interaction with the wave.\r\n             *\r\n             * @type {Number}\r\n             */\n            this.touchDownStarted = 0;\n\n            /**\r\n             * Gets or sets the time of ending interaction with the wave.\r\n             *\r\n             * @type {Number}\r\n             */\n            this.touchUpStarted = 0;\n\n            /**\r\n             * Gets or sets the start position of the wave.\r\n             *\r\n             * @type {{x: Number, y: Number}}\r\n             */\n            this.startPosition = { x: 0, y: 0 };\n\n            /**\r\n             * Gets or sets the end position of the wave.\r\n             *\r\n             * @type {{x: Number, y: Number}}\r\n             */\n            this.endPosition = { x: 0, y: 0 };\n\n            return this;\n        }\n\n        /**\r\n         * Performs updating of the wave's values.\r\n         *\r\n         * @returns {PaperWave} Current instance for method chaining.\r\n         */\n\n    }, {\n        key: 'draw',\n        value: function draw() {\n            var cssString = undefined,\n                scaleFactor = this.radius / (this.containerRect.size / 2),\n                containerCenter = this.containerRect.center,\n                currentPos = this.currentPosition,\n                deltaPos = {\n                x: currentPos.x - containerCenter.x,\n                y: currentPos.y - containerCenter.y\n            };\n\n            this.$wave.style.opacity = this.opacity;\n\n            cssString = 'translate(' + deltaPos.x + 'px, ' + deltaPos.y + 'px)';\n            this.$.style.webkitTransform = cssString;\n            this.$.style.mozTransform = cssString;\n            this.$.style.msTransform = cssString;\n            this.$.style.oTransform = cssString;\n            this.$.style.transform = 'translate3d(' + deltaPos.x + 'px, ' + deltaPos.y + 'px, 0)';\n\n            cssString = 'scale(' + scaleFactor + ',' + scaleFactor + ')';\n            this.$wave.style.webkitTransform = cssString;\n            this.$wave.style.mozTransform = cssString;\n            this.$wave.style.msTransform = cssString;\n            this.$wave.style.oTransform = cssString;\n            this.$wave.style.transform = 'scale3d(' + scaleFactor + ',' + scaleFactor + ', 1)';\n\n            return this;\n        }\n\n        /**\r\n         * Performs ripple-down effect on the current wave.\r\n         *\r\n         * @param {(Event|Object)} [event=null] - An object containing coordinates of interaction point to set start position of ripple effect.\r\n         * @returns {PaperWave} Current instance for method chaining.\r\n         */\n\n    }, {\n        key: 'downAction',\n        value: function downAction() {\n            var event = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\n            var containerCenter = this.containerRect.center;\n\n            this.resetDefaults();\n\n            this.touchDownStarted = _now();\n            this.startPosition = this.center || !event ? containerCenter : {\n                x: (event.clientX || event.x) - this.containerRect.boundingRect.left,\n                y: (event.clientY || event.y) - this.containerRect.boundingRect.top\n            };\n            this.endPosition = this.recenters ? containerCenter : this.endPosition;\n            this.maxRadius = this.containerRect.distanceToFarthestCorner(this.startPosition);\n\n            this.$.style.top = (this.containerRect.height - this.containerRect.size) / 2 + 'px';\n            this.$.style.left = (this.containerRect.width - this.containerRect.size) / 2 + 'px';\n            this.$.style.width = this.containerRect.size + 'px';\n            this.$.style.height = this.containerRect.size + 'px';\n\n            return this;\n        }\n\n        /**\r\n         * Performs ripple-up effect on the current wave.\r\n         *\r\n         * @returns {PaperWave} Current instance for method chaining.\r\n         */\n\n    }, {\n        key: 'upAction',\n        value: function upAction() {\n            if (!this.isTouchDown) {\n                return this;\n            }\n\n            /**\r\n             * @private\r\n             */\n            this.touchUpStarted = _now();\n\n            return this;\n        }\n\n        /**\r\n         * Removes the wave from a DOM.\r\n         *\r\n         * @returns {PaperWave} Current instance for method chaining.\r\n         */\n\n    }, {\n        key: 'remove',\n        value: function remove() {\n            this.$.parentNode.removeChild(this.$);\n\n            return this;\n        }\n    }, {\n        key: 'touchDownElapsed',\n\n        /**\r\n         * Gets the time in milliseconds elapsed from the moment where interaction with the wave was started.\r\n         *\r\n         * @returns {Number} The time in milliseconds.\r\n         */\n        get: function get() {\n            var elapsed;\n\n            if (!this.touchDownStarted) {\n                return 0;\n            }\n\n            elapsed = _now() - this.touchDownStarted;\n\n            if (this.touchUpStarted) {\n                elapsed -= this.touchUpElapsed;\n            }\n\n            return elapsed;\n        }\n\n        /**\r\n         * Gets the time in milliseconds elapsed from the moment where interaction with the wave was ended.\r\n         *\r\n         * @returns {Number} The time in milliseconds.\r\n         */\n\n    }, {\n        key: 'touchUpElapsed',\n        get: function get() {\n            return this.touchUpStarted ? _now() - this.touchUpStarted : 0;\n        }\n\n        /**\r\n         * Gets the time in seconds elapsed since the moment where interaction with the wave was started.\r\n         *\r\n         * @returns {Number} The time in seconds.\r\n         */\n\n    }, {\n        key: 'touchDownElapsedSeconds',\n        get: function get() {\n            return this.touchDownElapsed / 1000;\n        }\n\n        /**\r\n         * Gets the time in seconds elapsed since the moment where interaction with the wave was ended.\r\n         *\r\n         * @returns {number} The time in seconds.\r\n         */\n\n    }, {\n        key: 'touchUpElapsedSeconds',\n        get: function get() {\n            return this.touchUpElapsed / 1000;\n        }\n\n        /**\r\n         * Gets the total interaction time.\r\n         *\r\n         * @returns {Number} The time in seconds\r\n         */\n\n    }, {\n        key: 'mouseInteractionSeconds',\n        get: function get() {\n            return this.touchDownElapsedSeconds + this.touchUpElapsedSeconds;\n        }\n\n        /**\r\n         * Gets the wave's radius at the current time.\r\n         *\r\n         * @returns {Number} The value of the wave's radius.\r\n         */\n\n    }, {\n        key: 'radius',\n        get: function get() {\n            var radius = Math.min(Math.sqrt(Math.pow(this.containerRect.width, 2) + Math.pow(this.containerRect.height, 2)), PaperWave.MAX_RADIUS) * 1.1 + 5,\n                elapsed = 1.1 - 0.2 * (radius / PaperWave.MAX_RADIUS),\n                currentTime = this.mouseInteractionSeconds / elapsed,\n                actualRadius = radius * (1 - Math.pow(80, -currentTime));\n\n            return Math.abs(actualRadius);\n        }\n\n        /**\r\n         * Gets the wave's opacity at the current time.\r\n         *\r\n         * @returns {Number} The value of the wave's opacity.\r\n         */\n\n    }, {\n        key: 'opacity',\n        get: function get() {\n            if (!this.touchUpStarted) {\n                return this.initialOpacity;\n            }\n\n            return Math.max(0, this.initialOpacity - this.touchUpElapsedSeconds * this.opacityDecayVelocity);\n        }\n\n        /**\r\n         * Gets the wave's outer opacity at the current time.\r\n         *\r\n         * @returns {Number} The value of the wave's outer opacity.\r\n         */\n\n    }, {\n        key: 'outerOpacity',\n        get: function get() {\n            return Math.max(0, Math.min(this.touchUpElapsedSeconds * 0.3, this.opacity));\n        }\n\n        /**\r\n         * Determines whether the wave is fully opaque or not.\r\n         *\r\n         * @returns {Boolean} `true`, if so, otherwise `false`.\r\n         */\n\n    }, {\n        key: 'isWaveFullyOpaque',\n        get: function get() {\n            return this.opacity < 0.01 && this.radius >= Math.min(this.maxRadius, PaperWave.MAX_RADIUS);\n        }\n\n        /**\r\n         * Determines whether the wave reached its max radius or not.\r\n         *\r\n         * @returns {Boolean} `true`, if so, otherwise `false`.\r\n         */\n\n    }, {\n        key: 'isMaxRadiusReached',\n        get: function get() {\n            return this.opacity >= this.initialOpacity && this.radius >= Math.min(this.maxRadius, PaperWave.MAX_RADIUS);\n        }\n\n        /**\r\n         * Determines whether the animation of rippling effect completed or not.\r\n         *\r\n         * @returns {Boolean} `true`, if so, otherwise `false`.\r\n         */\n\n    }, {\n        key: 'isAnimationComplete',\n        get: function get() {\n            return this.touchUpStarted ? this.isWaveFullyOpaque : this.isMaxRadiusReached;\n        }\n\n        /**\r\n         * Gets the wave's translation fraction value.\r\n         *\r\n         * @returns {Number} The value of the wave's translation fraction.\r\n         */\n\n    }, {\n        key: 'translationFraction',\n        get: function get() {\n            return Math.min(1, this.radius / this.containerRect.size * 2 / Math.sqrt(2));\n        }\n\n        /**\r\n         * Gets the wave's current position.\r\n         *\r\n         * @returns {{x: Number, y: Number}} Object containing coordinates of the wave's current position.\r\n         */\n\n    }, {\n        key: 'currentPosition',\n        get: function get() {\n            var translateFraction = this.translationFraction,\n                x = this.startPosition.x,\n                y = this.startPosition.y;\n\n            if (this.endPosition.x) {\n                x = this.startPosition.x + translateFraction * (this.endPosition.x - this.startPosition.x);\n            }\n\n            if (this.endPosition.y) {\n                y = this.startPosition.y + translateFraction * (this.endPosition.y - this.startPosition.y);\n            }\n\n            return { x: x, y: y };\n        }\n\n        /**\r\n         * Determines whether the pointing device is still in interaction with the current wave.\r\n         *\r\n         * @returns {Boolean} `true`, if so, otherwise `false`.\r\n         */\n\n    }, {\n        key: 'isTouchDown',\n        get: function get() {\n            return this.touchDownStarted && !this.touchUpStarted;\n        }\n    }]);\n\n    return PaperWave;\n})();\n/**\r\n * This file\\code is part of Paper UI project.\r\n *\r\n * Paper UI - is a modern front-end framework based on Material Design by Google\r\n * https://github.com/virtyaluk/paper-ui\r\n *\r\n * Copyright (c) 2015 Bohdan Shtepan\r\n * http://modern-dev.com/\r\n *\r\n * Licensed under the MIT license.\r\n */\n\n/**\r\n * Provides all the logic to produce ripple visual effect.\r\n * Other elements can use it to simulate rippling effect emanating from the point of contact.\r\n *\r\n * @class PaperRipple\r\n */\n\nPaperWave.MAX_RADIUS = 300;\n\nvar PaperRipple = (function () {\n    /**\r\n     * Initializes a new instance of the `PaperRipple` class with the specified `config` object.\r\n     *\r\n     * @constructs PaperRipple\r\n     * @param {(Object|Element)} [cfg={}] - A configuration object.\r\n     * @param {Number} [cfg.initialOpacity=0.25] - The initial opacity of the each wave.\r\n     * @param {Number} [cfg.opacityDecayVelocity=0.8] - How fast (opacity per second) the wave fades out.\r\n     * @param {Boolean} [cfg.recenters=false] - If `true`, waves will exhibit a gravitational pull towards the center of their container as they fade away.\r\n     * @param {Boolean} [cfg.center=false] - If `true`, waves will center inside its container.\r\n     * @param {Boolean} [cfg.round=false] - If `true`, ripple effect will apply within a circle.\r\n     * @param {Element} [cfg.target=null] - Target DOM element as the container for the waves.\r\n     * If target element is not presented, then new one will be created automatically.\r\n     * @returns {PaperRipple} The new instance of a class.\r\n     *\r\n     * @example\r\n     * // Creating the new instance\r\n     * var ripple = new PaperRipple({ recenters: true });\r\n     *\r\n     * // Appending it to another DOM element\r\n     * ripple.$.appendTo(someEl);\r\n     *\r\n     * // Listening to that element's events and performing ripple effect\r\n     * someEl.on({\r\n     *     mousedown: function(ev) {\r\n     *         ripple.downAction(ev);\r\n     *     },\r\n     *     mouseup: function() {\r\n     *         ripple.upAction();\r\n     *     }\r\n     * );\r\n     */\n\n    function PaperRipple(cfg) {\n        _classCallCheck(this, PaperRipple);\n\n        var _ref4 = cfg || {};\n\n        var _ref4$initialOpacity = _ref4.initialOpacity;\n        var initialOpacity = _ref4$initialOpacity === undefined ? 0.25 : _ref4$initialOpacity;\n        var _ref4$opacityDecayVel = _ref4.opacityDecayVelocity;\n        var opacityDecayVelocity = _ref4$opacityDecayVel === undefined ? 0.8 : _ref4$opacityDecayVel;\n        var _ref4$recenters = _ref4.recenters;\n        var recenters = _ref4$recenters === undefined ? false : _ref4$recenters;\n        var _ref4$center = _ref4.center;\n        var center = _ref4$center === undefined ? false : _ref4$center;\n        var _ref4$round = _ref4.round;\n        var round = _ref4$round === undefined ? false : _ref4$round;\n        var _ref4$target = _ref4.target;\n        var target = _ref4$target === undefined ? null : _ref4$target;\n\n        /**\r\n         * Gets or sets the initial opacity of the each wave.\r\n         *\r\n         * @type {Number}\r\n         */\n\n        this.initialOpacity = initialOpacity;\n\n        /**\r\n         * Gets or sets how fast (opacity per second) the wave fades out.\r\n         *\r\n         * @type {Number}\r\n         */\n        this.opacityDecayVelocity = opacityDecayVelocity;\n\n        /**\r\n         * @type {PaperWave[]}\r\n         * @private\r\n         */\n        this._waves = [];\n\n        this._initTarget(cfg && cfg.nodeType ? cfg : target && target.nodeType ? target : null);\n\n        /**\r\n         * @type {Boolean}\r\n         * @private\r\n         */\n        this.recenters = recenters || this.recenters;\n\n        /**\r\n         * @type {Boolean}\r\n         * @private\r\n         */\n        this.center = center || this.center;\n\n        /**\r\n         * @type {Boolean}\r\n         * @private\r\n         */\n        this.round = round || this.round;\n\n        return this;\n    }\n\n    /**\r\n     * Determines whether all the waves should be re-centered towards the center of the container.\r\n     *\r\n     * @returns {Boolean} If `true`, waves will exhibit a gravitational pull towards the center of the container as they fade away.\r\n     */\n\n    _createClass(PaperRipple, [{\n        key: '_initTarget',\n\n        /**\r\n         * @param {HTMLElement} [target=null] - Target DOM element.\r\n         * @returns {PaperRipple} Current instance for method chaining.\r\n         * @private\r\n         */\n        value: function _initTarget() {\n            var target = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n\n            var _doc = _doc || window.document;\n\n            if (!this.$) {\n                /**\r\n                 * The object wrapper containing all the DOM elements belongs to the current instance.\r\n                 *\r\n                 * @type {Object}\r\n                 */\n                this.$ = target || _doc.createElement('div');\n                this.$.classList.add('paper-ripple');\n            }\n\n            if (!this.$background) {\n                /**\r\n                 * The object wrapper containing the `$background` DOM element belongs to the current instance.\r\n                 *\r\n                 * @type {Object}\r\n                 */\n                this.$background = target && target.querySelector('.paper-ripple__background') || _doc.createElement('div');\n\n                this.$background.classList.add('paper-ripple__background');\n                this.$.appendChild(this.$background);\n            }\n\n            if (!this.$waves) {\n                /**\r\n                 * The object wrapper containing the waves container belongs to the current instance.\r\n                 *\r\n                 * @type {Object}\r\n                 */\n                this.$waves = target && target.querySelector('.paper-ripple__waves') || _doc.createElement('div');\n\n                this.$waves.classList.add('paper-ripple__waves');\n                this.$.appendChild(this.$waves);\n            }\n\n            return this;\n        }\n\n        /**\r\n         * Adds new wave to the list of visual ripples.\r\n         *\r\n         * @returns {PaperWave} Current instance for method chaining.\r\n         */\n\n    }, {\n        key: 'addWave',\n        value: function addWave() {\n            var wave = new PaperWave(this);\n\n            this.$waves.appendChild(wave.$);\n            this.$background.style.backgroundColor = wave.color;\n            this._waves.push(wave);\n\n            return wave;\n        }\n\n        /**\r\n         * Produces a ripple-down effect.\r\n         *\r\n         * @param {(Event|{clientX: Number, clientY: Number}|{x: Number, y: Number})} [ev=null] - Object containing coordinates of the point of contact.\r\n         * @returns {PaperRipple} Current instance for method chaining.\r\n         */\n\n    }, {\n        key: 'downAction',\n        value: function downAction(ev) {\n            var wave = this.addWave();\n\n            wave.downAction(ev);\n            this.animate();\n\n            return this;\n        }\n\n        /**\r\n         * Produces a ripple-up effect.\r\n         *\r\n         * @returns {PaperRipple} Current instance for method chaining.\r\n         */\n\n    }, {\n        key: 'upAction',\n        value: function upAction() {\n            this._waves.forEach(function (wave) {\n                wave.upAction();\n            });\n\n            this.animate();\n\n            return this;\n        }\n\n        /**\r\n         * Removes given wave from the list of visual ripples.\r\n         *\r\n         * @param {PaperWave} wave - The wave to remove.\r\n         * @returns {PaperRipple} Current instance for method chaining.\r\n         */\n\n    }, {\n        key: 'removeWave',\n        value: function removeWave(wave) {\n            var waveIndex = this._waves.indexOf(wave);\n\n            if (waveIndex < 0) {\n                return this;\n            }\n\n            this._waves.splice(waveIndex, 1);\n\n            wave.remove();\n\n            return this;\n        }\n\n        /**\r\n         * Animates all the waves in the list of visual ripples.\r\n         *\r\n         * @returns {PaperRipple} Current instance for method chaining.\r\n         */\n\n    }, {\n        key: 'animate',\n        value: function animate() {\n            var i = undefined,\n                l = undefined,\n                wave = undefined;\n\n            for (i = 0, l = this._waves.length; i < l; i++) {\n                wave = this._waves[i];\n\n                if (wave) {\n                    wave.draw();\n\n                    this.$background.style.opacity = wave.outerOpacity;\n\n                    if (wave.isWaveFullyOpaque && !wave.isMaxRadiusReached) {\n                        this.removeWave(wave);\n                    }\n                }\n            }\n\n            if (!this.shouldKeepAnimating && this._waves.length === 0) {\n                this.$background.style.backgroundColor = null;\n            } else {\n                window.requestAnimationFrame(this.animate.bind(this));\n            }\n\n            return this;\n        }\n    }, {\n        key: 'recenters',\n        get: function get() {\n            return this.$.hasAttribute('recenters');\n        }\n\n        /**\r\n         * Sets the value that indicates whether all the waves should be re-centered towards the center of the container.\r\n         *\r\n         * @param {Boolean} [newValue=false] - The new value.\r\n         * @returns {void} Nothing.\r\n         */\n        ,\n        set: function set(newValue) {\n            this.$[newValue ? 'setAttribute' : 'removeAttribute']('recenters', '');\n        }\n\n        /**\r\n         * Determines whether all the waves should start a movement from the center of the container.\r\n         *\r\n         * @returns {Boolean} If `true`, waves will center inside its container\r\n         */\n\n    }, {\n        key: 'center',\n        get: function get() {\n            return this.$.hasAttribute('center');\n        }\n\n        /**\r\n         * Sets the value that indicates whether all the waves should start a movement from the center of the container.\r\n         *\r\n         * @param {Boolean} [newValue=false] - The new value.\r\n         * @returns {void} Nothing.\r\n         */\n        ,\n        set: function set(newValue) {\n            this.$[newValue ? 'setAttribute' : 'removeAttribute']('center', '');\n        }\n\n        /**\r\n         * Determines whether ripple effect should apply within a circle.\r\n         * \r\n         * @returns {Boolean} If `true`, ripple effect will apply within a circle.\r\n         */\n\n    }, {\n        key: 'round',\n        get: function get() {\n            return this.$.classList.contains('paper-ripple--round');\n        }\n\n        /**\r\n         * Sets the value that indicates whether ripple effect should apply within a circle.\r\n         * \r\n         * @param {Boolean} [newValue=false] - The new value.\r\n         * @returns {void} Nothing.\r\n         */\n        ,\n        set: function set(newValue) {\n            this.$.classList.toggle('paper-ripple--round', newValue);\n        }\n\n        /**\r\n         * Determines whether the ripple should keep animating or not.\r\n         *\r\n         * @returns {Boolean} `true`, if so, otherwise `false`.\r\n         */\n\n    }, {\n        key: 'shouldKeepAnimating',\n        get: function get() {\n            return this._waves.some(function (wave) {\n                return !wave.isAnimationComplete;\n            });\n        }\n    }]);\n\n    return PaperRipple;\n})();\n\nmodule.exports = PaperRipple;\n/**\r\n * This file\\code is part of Paper UI project.\r\n *\r\n * Paper UI - is a modern front-end framework based on Material Design by Google\r\n * https://github.com/virtyaluk/paper-ui\r\n *\r\n * Copyright (c) 2015 Bohdan Shtepan\r\n * http://modern-dev.com/\r\n *\r\n * Licensed under the MIT license.\r\n */\n\nvar _touchEvents = (function () {\n    return window.navigator.msPointerEnabled ? window.PointerEvent ? { down: 'pointerdown', up: 'pointerup' } : { down: 'MSPointerDown', up: 'MSPointerUp' } : { down: 'touchstart', up: 'touchend' };\n})();\n\n/**\r\n * paperRipple - makes each element in the current set able to produce a rippling effect within the element each time user interacts with the element.\r\n *\r\n * @param {(Object|HTMLElement)} [options=null] - A configuration object.\r\n * @returns {jQuery} Return the jQuery object itself.\r\n * @class paperRipple\r\n * @memberOf jQuery.fn\r\n */\n$.fn.paperRipple = function (options) {\n    return this.each(function () {\n        var ripple = new PaperRipple(options),\n            ev = {};\n\n        ev['mousedown ' + _touchEvents.down] = function (e) {\n            ripple.downAction(e);\n        };\n        ev['mouseup ' + _touchEvents.up] = function () {\n            ripple.upAction();\n        };\n\n        $(this).prepand(ripple.$).on(ev);\n    });\n};\n//# sourceMappingURL=paperRipple.jquery.js.map\n}(window, jQuery, {}));\n"],"sourceRoot":"/source/"}