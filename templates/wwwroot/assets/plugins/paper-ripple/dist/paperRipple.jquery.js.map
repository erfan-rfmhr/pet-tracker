/*
 * This file/code is part of Paper UI project.
 *
 * Paper UI - is a modern front-end framework based on Material Design by Google
 * https://github.com/virtyaluk/paper-ui
 *
 * Copyright (c) 2015 Bohdan Shtepan
 * http://modern-dev.com/
 *
 * Licensed under the MIT license.
 */
 ;(function(window, $, module) {
{"version":3,"sources":["paperRipple.jquery.js"],"names":[],"mappings":"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","file":"paperRipple.jquery.js","sourcesContent":["/**\r\n * This file\\code is part of Paper UI project.\r\n *\r\n * Paper UI - is a modern front-end framework based on Material Design by Google\r\n * https://github.com/virtyaluk/paper-ui\r\n *\r\n * Copyright (c) 2015 Bohdan Shtepan\r\n * http://modern-dev.com/\r\n *\r\n * Licensed under the MIT license.\r\n */\r\n\r\n/*eslint no-unused-vars: 0*/\r\n\r\n/**\r\n * Provides the utilities for getting element's metrics.\r\n *\r\n * @class ElementRect\r\n */\r\nclass ElementRect {\r\n    /**\r\n     * Initializes a new instance of the `ElementRect` class with the specified `element`.\r\n     *\r\n     * @constructs ElementRect\r\n     * @param {HTMLElement} element - The DOM element to get metrics from\r\n     * @returns {ElementRect} The new instance of a class.\r\n     */\r\n    constructor(element) {\r\n        this._element = element;\r\n\r\n        /**\r\n         * Returns the width of the current element.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        this.width = this.boundingRect.width;\r\n\r\n        /**\r\n         * Returns the height of the current element.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        this.height = this.boundingRect.height;\r\n\r\n        /**\r\n         * Returns the size (the biggest side) of the current element.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.size = Math.max(this.width, this.height);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the center coordinates of the current element.\r\n     *\r\n     * @returns {{ x: Number, y: Number }} Object containing coordinates of the element's center.\r\n     */\r\n    get center() {\r\n        return {\r\n            x: this.width / 2,\r\n            y: this.height / 2\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the size of the current element and its position relative to the viewport.\r\n     *\r\n     * @returns {ClientRect} The returned value is a `ClientRect` object, which contains read-only `left`, `top`, `right` and `bottom` properties\r\n     * describing the border-box in pixels. `top` and `left` are relative to the top-left of the viewport.\r\n     */\r\n    get boundingRect() {\r\n        return this._element.getBoundingClientRect();\r\n    }\r\n\r\n    /**\r\n     * Calculates euclidean distance between two points.\r\n     *\r\n     * @static\r\n     * @param {{ x: Number, y: Number }} point1 - Start point\r\n     * @param {{ x: Number, y: Number }} point2 - End point\r\n     * @returns {Number} Distance between two points.\r\n     */\r\n    static euclideanDistance(point1, point2) {\r\n        return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2));\r\n    }\r\n\r\n    /**\r\n     * Calculates the distance between given point and farthest corner of the current element.\r\n     *\r\n     * @param {{ x: Number, y:Number }} [point={x:0,y:0}] - The point object containing x and y coordinates.\r\n     * @returns {Number} Distance from a point to the container's farthest corner.\r\n     */\r\n    distanceToFarthestCorner({ x = 0, y = 0 }) {\r\n        return Math.max(\r\n            ElementRect.euclideanDistance({ x, y }, { x: 0, y: 0 }),\r\n            ElementRect.euclideanDistance({ x, y }, { x: this.width, y: 0 }),\r\n            ElementRect.euclideanDistance({ x, y }, { x: 0, y: this.height }),\r\n            ElementRect.euclideanDistance({ x, y }, { x: this.width, y: this.height })\r\n        );\r\n    }\r\n\r\n    /**\r\n     *  Determines if the specified point is contained within this element.\r\n     *\r\n     * @param {(Event|Object)} ev - The object containing coordinates of the point.\r\n     * @param {Number} ev.x - The `x` coordinate of the point.\r\n     * @param {Number} ev.y - The `y` coordinate of the point.\r\n     * @param {Number} ev.clientX - The `x` coordinate of the point.\r\n     * @param {Number} ev.clientY - The `y` coordinate of the point.\r\n     * @returns {Boolean} Returns `true` if the `x` and `y` coordinates of point is a point inside this element's rectangle, otherwise `false`.\r\n     */\r\n    contains({ x, y, clientX, clientY }) {\r\n        let l = this.boundingRect.left,\r\n            t = this.boundingRect.top,\r\n            w = this.boundingRect.width,\r\n            h = this.boundingRect.height,\r\n            _x = x || clientX || 0,\r\n            _y = y || clientY || 0;\r\n\r\n        return _x >= l && _x <= l + w && _y >= t && _y <= t + h;\r\n    }\r\n}\n/**\r\n * This file\\code is part of Paper UI project.\r\n *\r\n * Paper UI - is a modern front-end framework based on Material Design by Google\r\n * https://github.com/virtyaluk/paper-ui\r\n *\r\n * Copyright (c) 2015 Bohdan Shtepan\r\n * http://modern-dev.com/\r\n *\r\n * Licensed under the MIT license.\r\n */\r\n\r\n/*eslint no-unused-vars: 0*/\r\n\r\nlet _window = window || this,\r\n    _doc = _window.document,\r\n    _now = (function() {\r\n        return _window.performance && _window.performance.now ? _window.performance.now.bind(_window.performance) : Date.now;\r\n    }());\r\n\r\n/**\r\n * Provides all the logic to produce a one-time rippling effect.\r\n *\r\n * @class PaperWave\r\n */\r\nclass PaperWave {\r\n    /**\r\n     * Initializes a new instance of the `PaperWave` class with the specified `PaperRipple` instance.\r\n     *\r\n     * @constructs PaperWave\r\n     * @returns {PaperWave} The new instance of a class.\r\n     *\r\n     * @example\r\n     * var paperWave = new PaperWave(paperRipple);\r\n     *\r\n     * paperWave.downAction(null);\r\n     * paperWave.upAction();\r\n     *\r\n     * if (paperWave.isAnimationCompleted) {\r\n     *     paperWave.remove();\r\n     * }\r\n     */\r\n    constructor({ $, recenters = false, center = false, initialOpacity = 0.25, opacityDecayVelocity = 0.8 }) {\r\n        /**\r\n         * Gets or sets the color of the wave.\r\n         *\r\n         * @type {String}\r\n         */\r\n        this.color = _window.getComputedStyle($).color;\r\n\r\n        /**\r\n         * Gets or sets the container metrics of the wave.\r\n         *\r\n         * @type {ElementRect}\r\n         */\r\n        this.containerRect = new ElementRect($);\r\n\r\n        /**\r\n         * Determines whether the wave should be re-centered towards the center of its container.\r\n         *\r\n         * @type {Boolean}\r\n         */\r\n        this.recenters = recenters;\r\n\r\n        /**\r\n         * Determines whether the wave should start a movement from the center of its container.\r\n         *\r\n         * @type {Boolean}\r\n         */\r\n        this.center = center;\r\n\r\n        /**\r\n         * Gets initial opacity of the wave.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        this.initialOpacity = initialOpacity;\r\n\r\n        /**\r\n         * Gets opacity decay velocity of the wave.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        this.opacityDecayVelocity = opacityDecayVelocity;\r\n\r\n        /**\r\n         * Represents the object wrapped around the `wave` DOM element that belongs to the current instance.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        this.$wave = _doc.createElement('div');\r\n\r\n        this.$wave.classList.add('paper-ripple__wave');\r\n        this.$wave.style.backgroundColor = this.color;\r\n\r\n        /**\r\n         * Represents the object wrapped around the main DOM element that belongs to the current instance.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        this.$ = _doc.createElement('div');\r\n\r\n        this.$.classList.add('paper-ripple__wave-container');\r\n        this.$.appendChild(this.$wave);\r\n\r\n        this.resetDefaults();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Represents the max possible value of the wave's radius.\r\n     *\r\n     * @const {Number}\r\n     * @default\r\n     */\r\n    static MAX_RADIUS = 300;\r\n\r\n\r\n    /**\r\n     * Gets the time in milliseconds elapsed from the moment where interaction with the wave was started.\r\n     *\r\n     * @returns {Number} The time in milliseconds.\r\n     */\r\n    get touchDownElapsed() {\r\n        var elapsed;\r\n\r\n        if (!this.touchDownStarted) {\r\n            return 0;\r\n        }\r\n\r\n        elapsed = _now() - this.touchDownStarted;\r\n\r\n        if (this.touchUpStarted) {\r\n            elapsed -= this.touchUpElapsed;\r\n        }\r\n\r\n        return elapsed;\r\n    }\r\n\r\n    /**\r\n     * Gets the time in milliseconds elapsed from the moment where interaction with the wave was ended.\r\n     *\r\n     * @returns {Number} The time in milliseconds.\r\n     */\r\n    get touchUpElapsed() {\r\n        return this.touchUpStarted ? _now() - this.touchUpStarted : 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the time in seconds elapsed since the moment where interaction with the wave was started.\r\n     *\r\n     * @returns {Number} The time in seconds.\r\n     */\r\n    get touchDownElapsedSeconds() {\r\n        return this.touchDownElapsed / 1000;\r\n    }\r\n\r\n    /**\r\n     * Gets the time in seconds elapsed since the moment where interaction with the wave was ended.\r\n     *\r\n     * @returns {number} The time in seconds.\r\n     */\r\n    get touchUpElapsedSeconds() {\r\n        return this.touchUpElapsed / 1000;\r\n    }\r\n\r\n    /**\r\n     * Gets the total interaction time.\r\n     *\r\n     * @returns {Number} The time in seconds\r\n     */\r\n    get mouseInteractionSeconds() {\r\n        return this.touchDownElapsedSeconds + this.touchUpElapsedSeconds;\r\n    }\r\n\r\n    /**\r\n     * Gets the wave's radius at the current time.\r\n     *\r\n     * @returns {Number} The value of the wave's radius.\r\n     */\r\n    get radius() {\r\n        let radius = Math.min(\r\n                Math.sqrt(Math.pow(this.containerRect.width, 2) + Math.pow(this.containerRect.height, 2)),\r\n                PaperWave.MAX_RADIUS\r\n                ) * 1.1 + 5,\r\n            elapsed = 1.1 - 0.2 * (radius / PaperWave.MAX_RADIUS),\r\n            currentTime = this.mouseInteractionSeconds / elapsed,\r\n            actualRadius = radius * (1 - Math.pow(80, -currentTime));\r\n\r\n        return Math.abs(actualRadius);\r\n    }\r\n\r\n    /**\r\n     * Gets the wave's opacity at the current time.\r\n     *\r\n     * @returns {Number} The value of the wave's opacity.\r\n     */\r\n    get opacity() {\r\n        if (!this.touchUpStarted) {\r\n            return this.initialOpacity;\r\n        }\r\n\r\n        return Math.max(0, this.initialOpacity - this.touchUpElapsedSeconds * this.opacityDecayVelocity);\r\n    }\r\n\r\n    /**\r\n     * Gets the wave's outer opacity at the current time.\r\n     *\r\n     * @returns {Number} The value of the wave's outer opacity.\r\n     */\r\n    get outerOpacity() {\r\n        return Math.max(0, Math.min(this.touchUpElapsedSeconds * 0.3, this.opacity));\r\n    }\r\n\r\n    /**\r\n     * Determines whether the wave is fully opaque or not.\r\n     *\r\n     * @returns {Boolean} `true`, if so, otherwise `false`.\r\n     */\r\n    get isWaveFullyOpaque() {\r\n        return this.opacity < 0.01 && this.radius >= Math.min(this.maxRadius, PaperWave.MAX_RADIUS);\r\n    }\r\n\r\n    /**\r\n     * Determines whether the wave reached its max radius or not.\r\n     *\r\n     * @returns {Boolean} `true`, if so, otherwise `false`.\r\n     */\r\n    get isMaxRadiusReached() {\r\n        return this.opacity >= this.initialOpacity && this.radius >= Math.min(this.maxRadius, PaperWave.MAX_RADIUS);\r\n    }\r\n\r\n    /**\r\n     * Determines whether the animation of rippling effect completed or not.\r\n     *\r\n     * @returns {Boolean} `true`, if so, otherwise `false`.\r\n     */\r\n    get isAnimationComplete() {\r\n        return this.touchUpStarted ? this.isWaveFullyOpaque : this.isMaxRadiusReached;\r\n    }\r\n\r\n    /**\r\n     * Gets the wave's translation fraction value.\r\n     *\r\n     * @returns {Number} The value of the wave's translation fraction.\r\n     */\r\n    get translationFraction() {\r\n        return Math.min(1, this.radius / this.containerRect.size * 2 / Math.sqrt(2));\r\n    }\r\n\r\n    /**\r\n     * Gets the wave's current position.\r\n     *\r\n     * @returns {{x: Number, y: Number}} Object containing coordinates of the wave's current position.\r\n     */\r\n    get currentPosition() {\r\n        let translateFraction = this.translationFraction,\r\n            x = this.startPosition.x,\r\n            y = this.startPosition.y;\r\n\r\n        if (this.endPosition.x) {\r\n            x = this.startPosition.x + translateFraction * (this.endPosition.x - this.startPosition.x);\r\n        }\r\n\r\n        if (this.endPosition.y) {\r\n            y = this.startPosition.y + translateFraction * (this.endPosition.y - this.startPosition.y);\r\n        }\r\n\r\n        return { x, y };\r\n    }\r\n\r\n    /**\r\n     * Determines whether the pointing device is still in interaction with the current wave.\r\n     *\r\n     * @returns {Boolean} `true`, if so, otherwise `false`.\r\n     */\r\n    get isTouchDown() {\r\n        return this.touchDownStarted && !this.touchUpStarted;\r\n    }\r\n\r\n    /**\r\n     * Resets all the wave's values.\r\n     *\r\n     * @returns {PaperWave} Current instance for method chaining.\r\n     */\r\n    resetDefaults() {\r\n        /**\r\n         * Gets or sets max radius of the wave.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        this.maxRadius = 0;\r\n\r\n        /**\r\n         * Gets or sets the time of starting interaction with the wave.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        this.touchDownStarted = 0;\r\n\r\n        /**\r\n         * Gets or sets the time of ending interaction with the wave.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        this.touchUpStarted = 0;\r\n\r\n        /**\r\n         * Gets or sets the start position of the wave.\r\n         *\r\n         * @type {{x: Number, y: Number}}\r\n         */\r\n        this.startPosition = { x: 0, y: 0 };\r\n\r\n        /**\r\n         * Gets or sets the end position of the wave.\r\n         *\r\n         * @type {{x: Number, y: Number}}\r\n         */\r\n        this.endPosition = { x: 0, y: 0 };\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Performs updating of the wave's values.\r\n     *\r\n     * @returns {PaperWave} Current instance for method chaining.\r\n     */\r\n    draw() {\r\n        let cssString,\r\n            scaleFactor = this.radius / (this.containerRect.size / 2),\r\n            containerCenter = this.containerRect.center,\r\n            currentPos = this.currentPosition,\r\n            deltaPos = {\r\n                x: currentPos.x - containerCenter.x,\r\n                y: currentPos.y - containerCenter.y\r\n            };\r\n\r\n        this.$wave.style.opacity = this.opacity;\r\n\r\n        cssString = 'translate(' + deltaPos.x + 'px, ' + deltaPos.y + 'px)';\r\n        this.$.style.webkitTransform = cssString;\r\n        this.$.style.mozTransform = cssString;\r\n        this.$.style.msTransform = cssString;\r\n        this.$.style.oTransform = cssString;\r\n        this.$.style.transform = 'translate3d(' + deltaPos.x + 'px, ' + deltaPos.y + 'px, 0)';\r\n\r\n        cssString = 'scale(' + scaleFactor + ',' + scaleFactor + ')';\r\n        this.$wave.style.webkitTransform = cssString;\r\n        this.$wave.style.mozTransform = cssString;\r\n        this.$wave.style.msTransform = cssString;\r\n        this.$wave.style.oTransform = cssString;\r\n        this.$wave.style.transform = 'scale3d(' + scaleFactor + ',' + scaleFactor + ', 1)';\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Performs ripple-down effect on the current wave.\r\n     *\r\n     * @param {(Event|Object)} [event=null] - An object containing coordinates of interaction point to set start position of ripple effect.\r\n     * @returns {PaperWave} Current instance for method chaining.\r\n     */\r\n    downAction(event = null) {\r\n        let containerCenter = this.containerRect.center;\r\n\r\n        this.resetDefaults();\r\n\r\n        this.touchDownStarted = _now();\r\n        this.startPosition = this.center || !event ?\r\n            containerCenter :\r\n            {\r\n                x: (event.clientX || event.x) - this.containerRect.boundingRect.left,\r\n                y: (event.clientY || event.y) - this.containerRect.boundingRect.top\r\n            };\r\n        this.endPosition = this.recenters ? containerCenter : this.endPosition;\r\n        this.maxRadius = this.containerRect.distanceToFarthestCorner(this.startPosition);\r\n\r\n        this.$.style.top = (this.containerRect.height - this.containerRect.size) / 2 + 'px';\r\n        this.$.style.left = (this.containerRect.width - this.containerRect.size) / 2 + 'px';\r\n        this.$.style.width = this.containerRect.size + 'px';\r\n        this.$.style.height = this.containerRect.size + 'px';\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Performs ripple-up effect on the current wave.\r\n     *\r\n     * @returns {PaperWave} Current instance for method chaining.\r\n     */\r\n    upAction() {\r\n        if (!this.isTouchDown) {\r\n            return this;\r\n        }\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        this.touchUpStarted = _now();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes the wave from a DOM.\r\n     *\r\n     * @returns {PaperWave} Current instance for method chaining.\r\n     */\r\n    remove() {\r\n        this.$.parentNode.removeChild(this.$);\r\n\r\n        return this;\r\n    }\r\n}\n/**\r\n * This file\\code is part of Paper UI project.\r\n *\r\n * Paper UI - is a modern front-end framework based on Material Design by Google\r\n * https://github.com/virtyaluk/paper-ui\r\n *\r\n * Copyright (c) 2015 Bohdan Shtepan\r\n * http://modern-dev.com/\r\n *\r\n * Licensed under the MIT license.\r\n */\r\n\r\n/**\r\n * Provides all the logic to produce ripple visual effect.\r\n * Other elements can use it to simulate rippling effect emanating from the point of contact.\r\n *\r\n * @class PaperRipple\r\n */\r\nclass PaperRipple {\r\n    /**\r\n     * Initializes a new instance of the `PaperRipple` class with the specified `config` object.\r\n     *\r\n     * @constructs PaperRipple\r\n     * @param {(Object|Element)} [cfg={}] - A configuration object.\r\n     * @param {Number} [cfg.initialOpacity=0.25] - The initial opacity of the each wave.\r\n     * @param {Number} [cfg.opacityDecayVelocity=0.8] - How fast (opacity per second) the wave fades out.\r\n     * @param {Boolean} [cfg.recenters=false] - If `true`, waves will exhibit a gravitational pull towards the center of their container as they fade away.\r\n     * @param {Boolean} [cfg.center=false] - If `true`, waves will center inside its container.\r\n     * @param {Boolean} [cfg.round=false] - If `true`, ripple effect will apply within a circle.\r\n     * @param {Element} [cfg.target=null] - Target DOM element as the container for the waves.\r\n     * If target element is not presented, then new one will be created automatically.\r\n     * @returns {PaperRipple} The new instance of a class.\r\n     *\r\n     * @example\r\n     * // Creating the new instance\r\n     * var ripple = new PaperRipple({ recenters: true });\r\n     *\r\n     * // Appending it to another DOM element\r\n     * ripple.$.appendTo(someEl);\r\n     *\r\n     * // Listening to that element's events and performing ripple effect\r\n     * someEl.on({\r\n     *     mousedown: function(ev) {\r\n     *         ripple.downAction(ev);\r\n     *     },\r\n     *     mouseup: function() {\r\n     *         ripple.upAction();\r\n     *     }\r\n     * );\r\n     */\r\n    constructor(cfg) {\r\n        let { initialOpacity = 0.25, opacityDecayVelocity = 0.8, recenters = false, center = false, round = false, target = null } = cfg || {};\r\n\r\n        /**\r\n         * Gets or sets the initial opacity of the each wave.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        this.initialOpacity = initialOpacity;\r\n\r\n        /**\r\n         * Gets or sets how fast (opacity per second) the wave fades out.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        this.opacityDecayVelocity = opacityDecayVelocity;\r\n\r\n        /**\r\n         * @type {PaperWave[]}\r\n         * @private\r\n         */\r\n        this._waves = [];\r\n\r\n        this._initTarget(cfg && cfg.nodeType ? cfg : target && target.nodeType ? target : null);\r\n\r\n        /**\r\n         * @type {Boolean}\r\n         * @private\r\n         */\r\n        this.recenters = recenters || this.recenters;\r\n\r\n        /**\r\n         * @type {Boolean}\r\n         * @private\r\n         */\r\n        this.center = center || this.center;\r\n        \r\n        /**\r\n         * @type {Boolean}\r\n         * @private\r\n         */\r\n        this.round = round || this.round;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Determines whether all the waves should be re-centered towards the center of the container.\r\n     *\r\n     * @returns {Boolean} If `true`, waves will exhibit a gravitational pull towards the center of the container as they fade away.\r\n     */\r\n    get recenters() {\r\n        return this.$.hasAttribute('recenters');\r\n    }\r\n\r\n    /**\r\n     * Sets the value that indicates whether all the waves should be re-centered towards the center of the container.\r\n     *\r\n     * @param {Boolean} [newValue=false] - The new value.\r\n     * @returns {void} Nothing.\r\n     */\r\n    set recenters(newValue) {\r\n        this.$[newValue ? 'setAttribute' : 'removeAttribute']('recenters', '');\r\n    }\r\n\r\n    /**\r\n     * Determines whether all the waves should start a movement from the center of the container.\r\n     *\r\n     * @returns {Boolean} If `true`, waves will center inside its container\r\n     */\r\n    get center() {\r\n        return this.$.hasAttribute('center');\r\n    }\r\n\r\n    /**\r\n     * Sets the value that indicates whether all the waves should start a movement from the center of the container.\r\n     *\r\n     * @param {Boolean} [newValue=false] - The new value.\r\n     * @returns {void} Nothing.\r\n     */\r\n    set center(newValue) {\r\n        this.$[newValue ? 'setAttribute' : 'removeAttribute']('center', '');\r\n    }\r\n\r\n    /**\r\n     * Determines whether ripple effect should apply within a circle.\r\n     * \r\n     * @returns {Boolean} If `true`, ripple effect will apply within a circle.\r\n     */\r\n    get round() {\r\n        return this.$.classList.contains('paper-ripple--round');\r\n    }\r\n    \r\n    /**\r\n     * Sets the value that indicates whether ripple effect should apply within a circle.\r\n     * \r\n     * @param {Boolean} [newValue=false] - The new value.\r\n     * @returns {void} Nothing.\r\n     */\r\n    set round(newValue) {\r\n        this.$.classList.toggle('paper-ripple--round', newValue);\r\n    }\r\n\r\n    /**\r\n     * Determines whether the ripple should keep animating or not.\r\n     *\r\n     * @returns {Boolean} `true`, if so, otherwise `false`.\r\n     */\r\n    get shouldKeepAnimating() {\r\n        return this._waves.some(wave => !wave.isAnimationComplete);\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLElement} [target=null] - Target DOM element.\r\n     * @returns {PaperRipple} Current instance for method chaining.\r\n     * @private\r\n     */\r\n    _initTarget(target = null) {\r\n        let _doc = _doc || window.document;\r\n\r\n        if (!this.$) {\r\n            /**\r\n             * The object wrapper containing all the DOM elements belongs to the current instance.\r\n             *\r\n             * @type {Object}\r\n             */\r\n            this.$ = target || _doc.createElement('div');\r\n            this.$.classList.add('paper-ripple');\r\n        }\r\n\r\n        if (!this.$background) {\r\n            /**\r\n             * The object wrapper containing the `$background` DOM element belongs to the current instance.\r\n             *\r\n             * @type {Object}\r\n             */\r\n            this.$background = target && target.querySelector('.paper-ripple__background') || _doc.createElement('div');\r\n\r\n            this.$background.classList.add('paper-ripple__background');\r\n            this.$.appendChild(this.$background);\r\n        }\r\n\r\n        if (!this.$waves) {\r\n            /**\r\n             * The object wrapper containing the waves container belongs to the current instance.\r\n             *\r\n             * @type {Object}\r\n             */\r\n            this.$waves = target && target.querySelector('.paper-ripple__waves') || _doc.createElement('div');\r\n\r\n            this.$waves.classList.add('paper-ripple__waves');\r\n            this.$.appendChild(this.$waves);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Adds new wave to the list of visual ripples.\r\n     *\r\n     * @returns {PaperWave} Current instance for method chaining.\r\n     */\r\n    addWave() {\r\n        let wave = new PaperWave(this);\r\n\r\n        this.$waves.appendChild(wave.$);\r\n        this.$background.style.backgroundColor = wave.color;\r\n        this._waves.push(wave);\r\n\r\n        return wave;\r\n    }\r\n\r\n    /**\r\n     * Produces a ripple-down effect.\r\n     *\r\n     * @param {(Event|{clientX: Number, clientY: Number}|{x: Number, y: Number})} [ev=null] - Object containing coordinates of the point of contact.\r\n     * @returns {PaperRipple} Current instance for method chaining.\r\n     */\r\n    downAction(ev) {\r\n        let wave = this.addWave();\r\n\r\n        wave.downAction(ev);\r\n        this.animate();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Produces a ripple-up effect.\r\n     *\r\n     * @returns {PaperRipple} Current instance for method chaining.\r\n     */\r\n    upAction() {\r\n        this._waves.forEach(wave => {\r\n            wave.upAction();\r\n        });\r\n\r\n        this.animate();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removes given wave from the list of visual ripples.\r\n     *\r\n     * @param {PaperWave} wave - The wave to remove.\r\n     * @returns {PaperRipple} Current instance for method chaining.\r\n     */\r\n    removeWave(wave) {\r\n        let waveIndex = this._waves.indexOf(wave);\r\n\r\n        if (waveIndex < 0) {\r\n            return this;\r\n        }\r\n\r\n        this._waves.splice(waveIndex, 1);\r\n\r\n        wave.remove();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Animates all the waves in the list of visual ripples.\r\n     *\r\n     * @returns {PaperRipple} Current instance for method chaining.\r\n     */\r\n    animate() {\r\n        let i,\r\n            l,\r\n            wave;\r\n\r\n        for (i = 0, l = this._waves.length; i < l; i++) {\r\n            wave = this._waves[i];\r\n\r\n            if (wave) {\r\n                wave.draw();\r\n\r\n                this.$background.style.opacity = wave.outerOpacity;\r\n\r\n                if (wave.isWaveFullyOpaque && !wave.isMaxRadiusReached) {\r\n                    this.removeWave(wave);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!this.shouldKeepAnimating && this._waves.length === 0) {\r\n            this.$background.style.backgroundColor = null;\r\n        } else {\r\n            window.requestAnimationFrame(this.animate.bind(this));\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = PaperRipple;\n/**\r\n * This file\\code is part of Paper UI project.\r\n *\r\n * Paper UI - is a modern front-end framework based on Material Design by Google\r\n * https://github.com/virtyaluk/paper-ui\r\n *\r\n * Copyright (c) 2015 Bohdan Shtepan\r\n * http://modern-dev.com/\r\n *\r\n * Licensed under the MIT license.\r\n */\r\n\r\nvar _touchEvents = (function() {\r\n    return window.navigator.msPointerEnabled ?\r\n        window.PointerEvent ? { down: 'pointerdown', up: 'pointerup' } :\r\n        { down: 'MSPointerDown', up: 'MSPointerUp' } :\r\n    { down: 'touchstart', up: 'touchend' };\r\n}());\r\n\r\n/**\r\n * paperRipple - makes each element in the current set able to produce a rippling effect within the element each time user interacts with the element.\r\n *\r\n * @param {(Object|HTMLElement)} [options=null] - A configuration object.\r\n * @returns {jQuery} Return the jQuery object itself.\r\n * @class paperRipple\r\n * @memberOf jQuery.fn\r\n */\r\n$.fn.paperRipple = function(options) {\r\n    return this.each(function() {\r\n        var ripple = new PaperRipple(options),\r\n            ev = {};\r\n\r\n        ev['mousedown ' + _touchEvents.down] = function(e) { ripple.downAction(e); };\r\n        ev['mouseup ' + _touchEvents.up] = function() { ripple.upAction(); };\r\n\r\n        $(this).prepand(ripple.$).on(ev);\r\n    });\r\n};"],"sourceRoot":"/source/"}
}(window, jQuery, {}));
